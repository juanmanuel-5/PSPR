//package cliente;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import javax.swing.JOptionPane;

/**
 * Formulario que permite realizar peticiones a un servidor para obtener el fichero indicado
 * por el usuario, o para obtener la lista de archivos de texto del directorio actual.
 * @author José Carlos García Bermúdez
 */
public class ClienteB extends javax.swing.JFrame {

  // Dirección del servidor
  static final String HOST = "localhost";
  static final int Puerto = 1900;

  /**
   * Constructor de la ventana cliente
   */
  public ClienteB() {
    initComponents();

    // Configurar aspecto inicial

    this.setTitle("PSP03-02: Comunicaciones en Red (Cargar Fichero)");

    this.setLocationRelativeTo(null); // Centrada
    this.setResizable(false); // No cambia de tamaño
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  //@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    jPanel1 = new javax.swing.JPanel();
    lblTexto = new javax.swing.JLabel();
    txtNombreFichero = new javax.swing.JTextField();
    btnCargarFichero = new javax.swing.JButton();
    jPanel2 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    txtLog = new javax.swing.JTextArea();
    jPanel3 = new javax.swing.JPanel();
    btnListarFicheros = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jPanel1.setBorder(
      javax.swing.BorderFactory.createTitledBorder("Cargar Fichero")
    );

    lblTexto.setText("Nombre Fichero");

    btnCargarFichero.setText("Cargar");
    btnCargarFichero.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          btnCargarFicheroActionPerformed(evt);
        }
      }
    );

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
      jPanel1
    );
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          javax.swing.GroupLayout.Alignment.TRAILING,
          jPanel1Layout
            .createSequentialGroup()
            .addContainerGap()
            .addComponent(lblTexto)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(
              txtNombreFichero,
              javax.swing.GroupLayout.PREFERRED_SIZE,
              205,
              javax.swing.GroupLayout.PREFERRED_SIZE
            )
            .addPreferredGap(
              javax.swing.LayoutStyle.ComponentPlacement.UNRELATED
            )
            .addComponent(
              btnCargarFichero,
              javax.swing.GroupLayout.PREFERRED_SIZE,
              96,
              javax.swing.GroupLayout.PREFERRED_SIZE
            )
            .addContainerGap(
              javax.swing.GroupLayout.DEFAULT_SIZE,
              Short.MAX_VALUE
            )
        )
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          jPanel1Layout
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
              jPanel1Layout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblTexto)
                .addComponent(
                  txtNombreFichero,
                  javax.swing.GroupLayout.PREFERRED_SIZE,
                  javax.swing.GroupLayout.DEFAULT_SIZE,
                  javax.swing.GroupLayout.PREFERRED_SIZE
                )
                .addComponent(btnCargarFichero)
            )
            .addContainerGap(14, Short.MAX_VALUE)
        )
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

    txtLog.setColumns(20);
    txtLog.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
    txtLog.setRows(5);
    jScrollPane1.setViewportView(txtLog);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
      jPanel2
    );
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          jPanel2Layout
            .createSequentialGroup()
            .addContainerGap()
            .addComponent(
              jScrollPane1,
              javax.swing.GroupLayout.DEFAULT_SIZE,
              608,
              Short.MAX_VALUE
            )
            .addContainerGap()
        )
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          jPanel2Layout
            .createSequentialGroup()
            .addContainerGap()
            .addComponent(
              jScrollPane1,
              javax.swing.GroupLayout.DEFAULT_SIZE,
              235,
              Short.MAX_VALUE
            )
            .addContainerGap()
        )
    );

    jPanel3.setBorder(
      javax.swing.BorderFactory.createTitledBorder("Listar Ficheros Texto")
    );

    btnListarFicheros.setText("Listar Ficheros");
    btnListarFicheros.addActionListener(
      new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          btnListarFicherosActionPerformed(evt);
        }
      }
    );

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(
      jPanel3
    );
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          jPanel3Layout
            .createSequentialGroup()
            .addContainerGap(
              javax.swing.GroupLayout.DEFAULT_SIZE,
              Short.MAX_VALUE
            )
            .addComponent(btnListarFicheros)
            .addContainerGap(
              javax.swing.GroupLayout.DEFAULT_SIZE,
              Short.MAX_VALUE
            )
        )
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          jPanel3Layout
            .createSequentialGroup()
            .addContainerGap()
            .addComponent(btnListarFicheros)
            .addContainerGap(
              javax.swing.GroupLayout.DEFAULT_SIZE,
              Short.MAX_VALUE
            )
        )
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
      getContentPane()
    );
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          layout
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
              layout
                .createParallelGroup(
                  javax.swing.GroupLayout.Alignment.LEADING,
                  false
                )
                .addComponent(
                  jPanel2,
                  javax.swing.GroupLayout.PREFERRED_SIZE,
                  javax.swing.GroupLayout.DEFAULT_SIZE,
                  javax.swing.GroupLayout.PREFERRED_SIZE
                )
                .addGroup(
                  layout
                    .createSequentialGroup()
                    .addComponent(
                      jPanel1,
                      javax.swing.GroupLayout.PREFERRED_SIZE,
                      javax.swing.GroupLayout.DEFAULT_SIZE,
                      javax.swing.GroupLayout.PREFERRED_SIZE
                    )
                    .addPreferredGap(
                      javax.swing.LayoutStyle.ComponentPlacement.UNRELATED
                    )
                    .addComponent(
                      jPanel3,
                      javax.swing.GroupLayout.DEFAULT_SIZE,
                      javax.swing.GroupLayout.DEFAULT_SIZE,
                      Short.MAX_VALUE
                    )
                )
            )
            .addContainerGap(
              javax.swing.GroupLayout.DEFAULT_SIZE,
              Short.MAX_VALUE
            )
        )
    );
    layout.setVerticalGroup(
      layout
        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(
          layout
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
              layout
                .createParallelGroup(
                  javax.swing.GroupLayout.Alignment.LEADING,
                  false
                )
                .addComponent(
                  jPanel1,
                  javax.swing.GroupLayout.DEFAULT_SIZE,
                  javax.swing.GroupLayout.DEFAULT_SIZE,
                  Short.MAX_VALUE
                )
                .addComponent(
                  jPanel3,
                  javax.swing.GroupLayout.DEFAULT_SIZE,
                  javax.swing.GroupLayout.DEFAULT_SIZE,
                  Short.MAX_VALUE
                )
            )
            .addPreferredGap(
              javax.swing.LayoutStyle.ComponentPlacement.UNRELATED
            )
            .addComponent(
              jPanel2,
              javax.swing.GroupLayout.DEFAULT_SIZE,
              javax.swing.GroupLayout.DEFAULT_SIZE,
              Short.MAX_VALUE
            )
            .addContainerGap()
        )
    );

    pack();
  } // </editor-fold>//GEN-END:initComponents

  /**
   * Gestiona el evento asociado al botón con el que se solicita al servidor la carga de un fichero de texto.
   * @param evt Parámetros del evento.
   */
  private void btnCargarFicheroActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnCargarFicheroActionPerformed //GEN-HEADEREND:event_btnCargarFicheroActionPerformed
    try {
      // Es obligatorio indicar el nombre del fichero a procesar
      if (txtNombreFichero.getText().isEmpty()) throw new Exception(
        "No se ha indicado el nombre del fichero."
      );

      // Mostrar en la ventana la respuesta de la petición que se ha procesado
      // Se pasa como parámetro el nombre del fichero a mostrar
      txtLog.setText(procesarPeticion(txtNombreFichero.getText()));
    } catch (Exception e) {
      JOptionPane.showMessageDialog(
        this,
        e.getMessage(),
        "Error",
        JOptionPane.ERROR_MESSAGE
      );
    }
  } //GEN-LAST:event_btnCargarFicheroActionPerformed

  /**
   * Gestiona el evento asociado al botón con el que se solicita al servidor una lista de ficheros de texto.
   * @param evt Parámetros del evento.
   */
  private void btnListarFicherosActionPerformed(
    java.awt.event.ActionEvent evt
  ) { //GEN-FIRST:event_btnListarFicherosActionPerformed //GEN-HEADEREND:event_btnListarFicherosActionPerformed
    try {
      // Mostrar en la ventana la respuesta de la petición que se ha procesado
      // No se indica ningún texto, para obtener la lista de archivos de texto
      txtLog.setText(procesarPeticion(""));
    } catch (Exception e) {
      JOptionPane.showMessageDialog(
        this,
        e.getMessage(),
        "Error",
        JOptionPane.ERROR_MESSAGE
      );
    }
  } //GEN-LAST:event_btnListarFicherosActionPerformed

  /**
   * Realiza la petición al servidor del fichero indicado por el usuario (vacio para lista de ficheros)
   * @return Nombre del fichero de la petición
   */
  private static String procesarPeticion(String fichero) throws Exception {
    Socket sCliente = null; // Conexión con el servidor
    String textoRetorno;

    try {
      // Establecer una conexión con el servidor
      sCliente = new Socket(HOST, Puerto);

      // Definir un flujo de salida para enviar información al servidor
      DataOutputStream flujo_salida = new DataOutputStream(
        sCliente.getOutputStream()
      );

      // Enviar al servidor el nombre del fichero (o vacío para la lista de archivos)
      flujo_salida.writeUTF(fichero);

      // Definir un flujo de entrada para leer la información devuelta por el servidor
      DataInputStream flujo_entrada = new DataInputStream(
        sCliente.getInputStream()
      );

      // Devolver la información recibida
      textoRetorno = flujo_entrada.readUTF();
    } catch (IOException e) {
      throw new Exception(
        "No existe conexión con el servidor '" + HOST + ":" + Puerto + "'."
      );
    } catch (Exception e) {
      throw e;
    } finally {
      if (sCliente != null) {
        try {
          // Cerrar la conexión con el servidor
          sCliente.close();
        } catch (Exception e) {
          throw e;
        }
      }
    }

    return textoRetorno;
  }

  /**
   * Inicio de la aplicación cliente
   * @param args Argumentos de la línea de comandos
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger
        .getLogger(ClienteB.class.getName())
        .log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger
        .getLogger(ClienteB.class.getName())
        .log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger
        .getLogger(ClienteB.class.getName())
        .log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger
        .getLogger(ClienteB.class.getName())
        .log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(
      new Runnable() {
        public void run() {
          new ClienteB().setVisible(true);
        }
      }
    );
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnCargarFichero;
  private javax.swing.JButton btnListarFicheros;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel lblTexto;
  private javax.swing.JTextArea txtLog;
  private javax.swing.JTextField txtNombreFichero;
  // End of variables declaration//GEN-END:variables
}
